// Code generated by goagen v1.4.3, DO NOT EDIT.
//
// API "feedpushr": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/ncarlier/feedpushr/v3/design
// --out=/home/nicolas/workspace/fe/feedpushr/autogen
// --version=v1.4.3

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
)

// The search result (default view)
//
// Identifier: application/vnd.feedpushr.explore.v2+json; view=default
type ExploreResponse struct {
	// Feed description
	Desc string `form:"desc" json:"desc" yaml:"desc" xml:"desc"`
	// URL of the feed website
	HTMLURL string `form:"htmlUrl" json:"htmlUrl" yaml:"htmlUrl" xml:"htmlUrl"`
	// Feed title
	Title string `form:"title" json:"title" yaml:"title" xml:"title"`
	// URL of the XML feed
	XMLURL string `form:"xmlUrl" json:"xmlUrl" yaml:"xmlUrl" xml:"xmlUrl"`
}

// Validate validates the ExploreResponse media type instance.
func (mt *ExploreResponse) Validate() (err error) {
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if mt.Desc == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "desc"))
	}
	if mt.XMLURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "xmlUrl"))
	}
	if mt.HTMLURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "htmlUrl"))
	}
	return
}

// DecodeExploreResponse decodes the ExploreResponse instance encoded in resp body.
func (c *Client) DecodeExploreResponse(resp *http.Response) (*ExploreResponse, error) {
	var decoded ExploreResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// ExploreResponseCollection is the media type for an array of ExploreResponse (default view)
//
// Identifier: application/vnd.feedpushr.explore.v2+json; type=collection; view=default
type ExploreResponseCollection []*ExploreResponse

// Validate validates the ExploreResponseCollection media type instance.
func (mt ExploreResponseCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeExploreResponseCollection decodes the ExploreResponseCollection instance encoded in resp body.
func (c *Client) DecodeExploreResponseCollection(resp *http.Response) (ExploreResponseCollection, error) {
	var decoded ExploreResponseCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A RSS feed (default view)
//
// Identifier: application/vnd.feedpushr.feed.v2+json; view=default
type FeedResponse struct {
	// Date of creation
	Cdate time.Time `form:"cdate" json:"cdate" yaml:"cdate" xml:"cdate"`
	// Number of consecutive aggregation errors
	ErrorCount *int `form:"errorCount,omitempty" json:"errorCount,omitempty" yaml:"errorCount,omitempty" xml:"errorCount,omitempty"`
	// Last aggregation error
	ErrorMsg *string `form:"errorMsg,omitempty" json:"errorMsg,omitempty" yaml:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// URL of the feed website
	HTMLURL *string `form:"htmlUrl,omitempty" json:"htmlUrl,omitempty" yaml:"htmlUrl,omitempty" xml:"htmlUrl,omitempty"`
	// URL of the PubSubHubbud hub
	HubURL *string `form:"hubUrl,omitempty" json:"hubUrl,omitempty" yaml:"hubUrl,omitempty" xml:"hubUrl,omitempty"`
	// ID of feed (MD5 of the xmlUrl)
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
	// Last aggregation pass
	LastCheck *time.Time `form:"lastCheck,omitempty" json:"lastCheck,omitempty" yaml:"lastCheck,omitempty" xml:"lastCheck,omitempty"`
	// Date of modification
	Mdate time.Time `form:"mdate" json:"mdate" yaml:"mdate" xml:"mdate"`
	// Total number of processed items
	NbProcessedItems *int `form:"nbProcessedItems,omitempty" json:"nbProcessedItems,omitempty" yaml:"nbProcessedItems,omitempty" xml:"nbProcessedItems,omitempty"`
	// Next aggregation pass
	NextCheck *time.Time `form:"nextCheck,omitempty" json:"nextCheck,omitempty" yaml:"nextCheck,omitempty" xml:"nextCheck,omitempty"`
	// Aggregation status
	Status *string `form:"status,omitempty" json:"status,omitempty" yaml:"status,omitempty" xml:"status,omitempty"`
	// List of tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" yaml:"tags,omitempty" xml:"tags,omitempty"`
	// Title of the Feed
	Title string `form:"title" json:"title" yaml:"title" xml:"title"`
	// URL of the XML feed
	XMLURL string `form:"xmlUrl" json:"xmlUrl" yaml:"xmlUrl" xml:"xmlUrl"`
}

// Validate validates the FeedResponse media type instance.
func (mt *FeedResponse) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.XMLURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "xmlUrl"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}

	if mt.Status != nil {
		if !(*mt.Status == "running" || *mt.Status == "stopped") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.status`, *mt.Status, []interface{}{"running", "stopped"}))
		}
	}
	return
}

// A RSS feed (link view)
//
// Identifier: application/vnd.feedpushr.feed.v2+json; view=link
type FeedResponseLink struct {
	// ID of feed (MD5 of the xmlUrl)
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
	// URL of the XML feed
	XMLURL string `form:"xmlUrl" json:"xmlUrl" yaml:"xmlUrl" xml:"xmlUrl"`
}

// Validate validates the FeedResponseLink media type instance.
func (mt *FeedResponseLink) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.XMLURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "xmlUrl"))
	}
	return
}

// A RSS feed (tiny view)
//
// Identifier: application/vnd.feedpushr.feed.v2+json; view=tiny
type FeedResponseTiny struct {
	// Date of creation
	Cdate time.Time `form:"cdate" json:"cdate" yaml:"cdate" xml:"cdate"`
	// ID of feed (MD5 of the xmlUrl)
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
	// List of tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" yaml:"tags,omitempty" xml:"tags,omitempty"`
	// Title of the Feed
	Title string `form:"title" json:"title" yaml:"title" xml:"title"`
	// URL of the XML feed
	XMLURL string `form:"xmlUrl" json:"xmlUrl" yaml:"xmlUrl" xml:"xmlUrl"`
}

// Validate validates the FeedResponseTiny media type instance.
func (mt *FeedResponseTiny) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.XMLURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "xmlUrl"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}

	return
}

// DecodeFeedResponse decodes the FeedResponse instance encoded in resp body.
func (c *Client) DecodeFeedResponse(resp *http.Response) (*FeedResponse, error) {
	var decoded FeedResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeFeedResponseLink decodes the FeedResponseLink instance encoded in resp body.
func (c *Client) DecodeFeedResponseLink(resp *http.Response) (*FeedResponseLink, error) {
	var decoded FeedResponseLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeFeedResponseTiny decodes the FeedResponseTiny instance encoded in resp body.
func (c *Client) DecodeFeedResponseTiny(resp *http.Response) (*FeedResponseTiny, error) {
	var decoded FeedResponseTiny
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// FeedResponseCollection is the media type for an array of FeedResponse (default view)
//
// Identifier: application/vnd.feedpushr.feed.v2+json; type=collection; view=default
type FeedResponseCollection []*FeedResponse

// Validate validates the FeedResponseCollection media type instance.
func (mt FeedResponseCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// FeedResponseCollection is the media type for an array of FeedResponse (link view)
//
// Identifier: application/vnd.feedpushr.feed.v2+json; type=collection; view=link
type FeedResponseLinkCollection []*FeedResponseLink

// Validate validates the FeedResponseLinkCollection media type instance.
func (mt FeedResponseLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// FeedResponseCollection is the media type for an array of FeedResponse (tiny view)
//
// Identifier: application/vnd.feedpushr.feed.v2+json; type=collection; view=tiny
type FeedResponseTinyCollection []*FeedResponseTiny

// Validate validates the FeedResponseTinyCollection media type instance.
func (mt FeedResponseTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeFeedResponseCollection decodes the FeedResponseCollection instance encoded in resp body.
func (c *Client) DecodeFeedResponseCollection(resp *http.Response) (FeedResponseCollection, error) {
	var decoded FeedResponseCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeFeedResponseLinkCollection decodes the FeedResponseLinkCollection instance encoded in resp body.
func (c *Client) DecodeFeedResponseLinkCollection(resp *http.Response) (FeedResponseLinkCollection, error) {
	var decoded FeedResponseLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeFeedResponseTinyCollection decodes the FeedResponseTinyCollection instance encoded in resp body.
func (c *Client) DecodeFeedResponseTinyCollection(resp *http.Response) (FeedResponseTinyCollection, error) {
	var decoded FeedResponseTinyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A pagignated list of feeds (default view)
//
// Identifier: application/vnd.feedpushr.feeds-page.v2+json; view=default
type FeedsPageResponse struct {
	// Current page number
	Current int `form:"current" json:"current" yaml:"current" xml:"current"`
	// List of feeds
	Data FeedResponseCollection `form:"data" json:"data" yaml:"data" xml:"data"`
	// Max number of feeds by page
	Size int `form:"size" json:"size" yaml:"size" xml:"size"`
	// Total number of feeds
	Total int `form:"total" json:"total" yaml:"total" xml:"total"`
}

// Validate validates the FeedsPageResponse media type instance.
func (mt *FeedsPageResponse) Validate() (err error) {

	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if err2 := mt.Data.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// DecodeFeedsPageResponse decodes the FeedsPageResponse instance encoded in resp body.
func (c *Client) DecodeFeedsPageResponse(resp *http.Response) (*FeedsPageResponse, error) {
	var decoded FeedsPageResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// The filter specification (default view)
//
// Identifier: application/vnd.feedpushr.filter-spec.v2+json; view=default
type FilterSpecResponse struct {
	// Description of the filter
	Desc string `form:"desc" json:"desc" yaml:"desc" xml:"desc"`
	// Name of the filter
	Name  string             `form:"name" json:"name" yaml:"name" xml:"name"`
	Props PropSpecCollection `form:"props" json:"props" yaml:"props" xml:"props"`
}

// Validate validates the FilterSpecResponse media type instance.
func (mt *FilterSpecResponse) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Desc == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "desc"))
	}
	if mt.Props == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "props"))
	}
	if err2 := mt.Props.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// DecodeFilterSpecResponse decodes the FilterSpecResponse instance encoded in resp body.
func (c *Client) DecodeFilterSpecResponse(resp *http.Response) (*FilterSpecResponse, error) {
	var decoded FilterSpecResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// FilterSpecResponseCollection is the media type for an array of FilterSpecResponse (default view)
//
// Identifier: application/vnd.feedpushr.filter-spec.v2+json; type=collection; view=default
type FilterSpecResponseCollection []*FilterSpecResponse

// Validate validates the FilterSpecResponseCollection media type instance.
func (mt FilterSpecResponseCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeFilterSpecResponseCollection decodes the FilterSpecResponseCollection instance encoded in resp body.
func (c *Client) DecodeFilterSpecResponseCollection(resp *http.Response) (FilterSpecResponseCollection, error) {
	var decoded FilterSpecResponseCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A filter (default view)
//
// Identifier: application/vnd.feedpushr.filter.v2+json; view=default
type FilterResponse struct {
	// Alias of the filter
	Alias string `form:"alias" json:"alias" yaml:"alias" xml:"alias"`
	// Conditional expression of the filter
	Condition string `form:"condition" json:"condition" yaml:"condition" xml:"condition"`
	// Description of the filter
	Desc string `form:"desc" json:"desc" yaml:"desc" xml:"desc"`
	// Status
	Enabled bool `form:"enabled" json:"enabled" yaml:"enabled" xml:"enabled"`
	// ID of the filter
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
	// Name of the filter
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// Number of error
	NbError int `form:"nbError" json:"nbError" yaml:"nbError" xml:"nbError"`
	// Number of success
	NbSuccess int `form:"nbSuccess" json:"nbSuccess" yaml:"nbSuccess" xml:"nbSuccess"`
	// Filter properties
	Props map[string]interface{} `form:"props" json:"props" yaml:"props" xml:"props"`
}

// Validate validates the FilterResponse media type instance.
func (mt *FilterResponse) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Alias == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "alias"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Desc == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "desc"))
	}
	if mt.Condition == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "condition"))
	}
	if mt.Props == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "props"))
	}
	return
}

// DecodeFilterResponse decodes the FilterResponse instance encoded in resp body.
func (c *Client) DecodeFilterResponse(resp *http.Response) (*FilterResponse, error) {
	var decoded FilterResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// FilterResponseCollection is the media type for an array of FilterResponse (default view)
//
// Identifier: application/vnd.feedpushr.filter.v2+json; type=collection; view=default
type FilterResponseCollection []*FilterResponse

// Validate validates the FilterResponseCollection media type instance.
func (mt FilterResponseCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeFilterResponseCollection decodes the FilterResponseCollection instance encoded in resp body.
func (c *Client) DecodeFilterResponseCollection(resp *http.Response) (FilterResponseCollection, error) {
	var decoded FilterResponseCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// HAL link (default view)
//
// Identifier: application/vnd.feedpushr.hal-links.v2+json; view=default
type HALLink struct {
	// Link's destination
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the HALLink media type instance.
func (mt *HALLink) Validate() (err error) {
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	return
}

// DecodeHALLink decodes the HALLink instance encoded in resp body.
func (c *Client) DecodeHALLink(resp *http.Response) (*HALLink, error) {
	var decoded HALLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// API info (default view)
//
// Identifier: application/vnd.feedpushr.info.v2+json; view=default
type Info struct {
	// HAL links
	Links map[string]*HALLink `form:"_links" json:"_links" yaml:"_links" xml:"_links"`
	// Service description
	Desc string `form:"desc" json:"desc" yaml:"desc" xml:"desc"`
	// Service name
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// Service version
	Version string `form:"version" json:"version" yaml:"version" xml:"version"`
}

// Validate validates the Info media type instance.
func (mt *Info) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Desc == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "desc"))
	}
	if mt.Version == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "version"))
	}
	if mt.Links == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "_links"))
	}
	for _, e := range mt.Links {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeInfo decodes the Info instance encoded in resp body.
func (c *Client) DecodeInfo(resp *http.Response) (*Info, error) {
	var decoded Info
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// OPMLImportJobResponse media type (default view)
//
// Identifier: application/vnd.feedpushr.ompl-import-job.v2+json; view=default
type OPMLImportJobResponse struct {
	// ID of the import job
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
}

// Validate validates the OPMLImportJobResponse media type instance.
func (mt *OPMLImportJobResponse) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	return
}

// DecodeOPMLImportJobResponse decodes the OPMLImportJobResponse instance encoded in resp body.
func (c *Client) DecodeOPMLImportJobResponse(resp *http.Response) (*OPMLImportJobResponse, error) {
	var decoded OPMLImportJobResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// The output channel specification (default view)
//
// Identifier: application/vnd.feedpushr.output-spec.v2+json; view=default
type OutputSpecResponse struct {
	// Description of the output channel
	Desc string `form:"desc" json:"desc" yaml:"desc" xml:"desc"`
	// Name of the output channel
	Name  string             `form:"name" json:"name" yaml:"name" xml:"name"`
	Props PropSpecCollection `form:"props" json:"props" yaml:"props" xml:"props"`
}

// Validate validates the OutputSpecResponse media type instance.
func (mt *OutputSpecResponse) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Desc == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "desc"))
	}
	if mt.Props == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "props"))
	}
	if err2 := mt.Props.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// DecodeOutputSpecResponse decodes the OutputSpecResponse instance encoded in resp body.
func (c *Client) DecodeOutputSpecResponse(resp *http.Response) (*OutputSpecResponse, error) {
	var decoded OutputSpecResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// OutputSpecResponseCollection is the media type for an array of OutputSpecResponse (default view)
//
// Identifier: application/vnd.feedpushr.output-spec.v2+json; type=collection; view=default
type OutputSpecResponseCollection []*OutputSpecResponse

// Validate validates the OutputSpecResponseCollection media type instance.
func (mt OutputSpecResponseCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeOutputSpecResponseCollection decodes the OutputSpecResponseCollection instance encoded in resp body.
func (c *Client) DecodeOutputSpecResponseCollection(resp *http.Response) (OutputSpecResponseCollection, error) {
	var decoded OutputSpecResponseCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// The output channel (default view)
//
// Identifier: application/vnd.feedpushr.output.v2+json; view=default
type OutputResponse struct {
	// Alias of the output channel
	Alias string `form:"alias" json:"alias" yaml:"alias" xml:"alias"`
	// Conditional expression of the filter
	Condition string `form:"condition" json:"condition" yaml:"condition" xml:"condition"`
	// Description of the output channel
	Desc string `form:"desc" json:"desc" yaml:"desc" xml:"desc"`
	// Status
	Enabled bool `form:"enabled" json:"enabled" yaml:"enabled" xml:"enabled"`
	// Filters
	Filters FilterResponseCollection `form:"filters,omitempty" json:"filters,omitempty" yaml:"filters,omitempty" xml:"filters,omitempty"`
	// ID of the output
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
	// Name of the output channel
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// Number of error
	NbError int `form:"nbError" json:"nbError" yaml:"nbError" xml:"nbError"`
	// Number of success
	NbSuccess int `form:"nbSuccess" json:"nbSuccess" yaml:"nbSuccess" xml:"nbSuccess"`
	// Output channel properties
	Props map[string]interface{} `form:"props" json:"props" yaml:"props" xml:"props"`
}

// Validate validates the OutputResponse media type instance.
func (mt *OutputResponse) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Alias == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "alias"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Desc == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "desc"))
	}
	if mt.Condition == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "condition"))
	}
	if mt.Props == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "props"))
	}
	if err2 := mt.Filters.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	return
}

// DecodeOutputResponse decodes the OutputResponse instance encoded in resp body.
func (c *Client) DecodeOutputResponse(resp *http.Response) (*OutputResponse, error) {
	var decoded OutputResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// OutputResponseCollection is the media type for an array of OutputResponse (default view)
//
// Identifier: application/vnd.feedpushr.output.v2+json; type=collection; view=default
type OutputResponseCollection []*OutputResponse

// Validate validates the OutputResponseCollection media type instance.
func (mt OutputResponseCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeOutputResponseCollection decodes the OutputResponseCollection instance encoded in resp body.
func (c *Client) DecodeOutputResponseCollection(resp *http.Response) (OutputResponseCollection, error) {
	var decoded OutputResponseCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// The specification of a property (default view)
//
// Identifier: application/vnd.feedpushr.prop-spec.v2+json; view=default
type PropSpec struct {
	// Description of the output channel
	Desc string `form:"desc" json:"desc" yaml:"desc" xml:"desc"`
	// Name of the property
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// Property options
	Options map[string]string `form:"options,omitempty" json:"options,omitempty" yaml:"options,omitempty" xml:"options,omitempty"`
	// Property type ('text', 'url', ...)
	Type string `form:"type" json:"type" yaml:"type" xml:"type"`
}

// Validate validates the PropSpec media type instance.
func (mt *PropSpec) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Desc == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "desc"))
	}
	if mt.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "type"))
	}
	return
}

// DecodePropSpec decodes the PropSpec instance encoded in resp body.
func (c *Client) DecodePropSpec(resp *http.Response) (*PropSpec, error) {
	var decoded PropSpec
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// PropSpecCollection is the media type for an array of PropSpec (default view)
//
// Identifier: application/vnd.feedpushr.prop-spec.v2+json; type=collection; view=default
type PropSpecCollection []*PropSpec

// Validate validates the PropSpecCollection media type instance.
func (mt PropSpecCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodePropSpecCollection decodes the PropSpecCollection instance encoded in resp body.
func (c *Client) DecodePropSpecCollection(resp *http.Response) (PropSpecCollection, error) {
	var decoded PropSpecCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
